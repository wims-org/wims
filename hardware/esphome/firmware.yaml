substitutions:
  reader_id: !secret reader_id
  name: rfid-reader-${reader_id}
  friendly_name: RFID Reader ${reader_id}

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2024.6.0
  name_add_mac_suffix: false
  project:
    name: esphome.web
    version: dev

esp32:
  board: esp32-c3-devkitm-1
  variant: esp32c3
  framework:
    type: esp-idf


# Enable logging
logger:

# Enable Home Assistant API
api:
  services:
    - service: update_display
      variables:
        tag_id: string
        item_name: string
      then:
        - lambda: |
            // Aktualisiert die Nachricht auf dem Display
            id(rfid_message) = tag_id + "\n" + item_name;

# Allow Over-The-Air updates
ota:
- platform: esphome

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # Fallback access point
  ap:
    ssid: "${name}"
    password: !secret fallback_psk

# In combination with the `ap` this allows the user
# to provision wifi credentials to the device via WiFi AP.
captive_portal:


mqtt:
  broker: !secret mqtt_host
  username: !secret mqtt_user
  password: !secret mqtt_password
  on_connect:
    - rtttl.play: 'connected:d=4,o=5,b=180:16c,e,g,c6'
    - lambda: |
        // Setzt die Displaynachricht nach MQTT-Verbindung
        id(rfid_message) = "MQTT connected...";
    - display.page.show: page_qrcode
  on_json_message:
    - topic: rfid/itemdata/${name} 
      then:
        - lambda: |
            // JSON-Daten aus der Nachricht extrahieren und in Variablen speichern
            if (x.containsKey("tag_id")) {
              id(rfid_tag) = x["tag_id"].as<std::string>();
            }
            if (x.containsKey("item_name")) {
              id(scanned_item_name) = x["item_name"].as<std::string>();
            }
            if (x.containsKey("item_storage_location")) {
              id(scanned_item_location) = x["item_storage_location"].as<std::string>();
            }

# I2C f√ºr RFID (PN532) und OLED-Display
i2c:
  sda: 4
  scl: 5
  scan: true
  id: bus_a

globals:
  - id: device_name
    type: std::string
    restore_value: no
    initial_value: '"${name}"'

  - id: rfid_message
    type: std::string
    restore_value: no
    initial_value: '"RFID Reader init..."'

  - id: rfid_tag
    type: std::string
    restore_value: no
    initial_value: '""'

  - id: scanned_item_name
    type: std::string
    restore_value: no
    initial_value: '""'

  - id: scanned_item_location
    type: std::string
    restore_value: no
    initial_value: '""'

qr_code:
  - id: inventory_manager_url_qr
    value: "http://192.168.23.20:5000?reader=${name}"

# RFID-Modul PN532
pn532_i2c:
  update_interval: 1s
  on_tag:
    then:
      - display.page.show: page_tag
      - component.update: oled_display
      - lambda: |
          // Speichert die gescannte RFID-Tag ID
          id(rfid_tag) = x.c_str();
      - rtttl.play: 'scanner_beep:d=4,o=5,b=180:16a5,16a6'
      - mqtt.publish:
          topic: rfid/scannedtag
          payload: !lambda |-
            char json[100];
            snprintf(json, sizeof(json), "{\"reader_id\": \"%s\", \"tag_id\": \"%s\"}", id(device_name).c_str(), x.c_str());
            return std::string(json);

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    rotation: 180
    id: oled_display
    update_interval: 1s
    pages:
      - id: page_info
        lambda: |-
          it.print(64, 24, id(rfid_font), TextAlign::CENTER, id(rfid_message).c_str());
      - id: page_tag
        lambda: |-
          it.printf(64, 0, id(rfid_font), TextAlign::TOP_CENTER, "%s", id(scanned_item_name).c_str());
          it.printf(64, 20, id(rfid_font), TextAlign::TOP_CENTER, "Lagerort:");
          it.printf(64, 40, id(rfid_font), TextAlign::TOP_CENTER, "%s", id(scanned_item_location).c_str());
          ESP_LOGD("RFID", "Scanned Item Value: %s", id(scanned_item_name).c_str());
      - id: page_qrcode
        lambda: |-
          auto size = id(inventory_manager_url_qr).get_size() * 2;
          auto x = (it.get_width() / 2) - (size / 2);
          auto y = (it.get_height() / 2) - (size / 2);
          it.qr_code(x, y, id(inventory_manager_url_qr), Color(255,255,255), 2);

font:
  - file: "arial.ttf"
    id: rfid_font
    size: 16

output:
  - platform: ledc
    pin: GPIO10
    id: rtttl_out

rtttl:
  output: rtttl_out
