/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/readers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Readers */
        get: operations["get_readers_readers_get"];
        put?: never;
        /** Create Reader */
        post: operations["create_reader_readers_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/readers/{reader_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read User */
        get: operations["read_user_readers__reader_id__get"];
        put?: never;
        post?: never;
        /** Delete Reader */
        delete: operations["delete_reader_readers__reader_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/items/{rfid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Item */
        get: operations["get_item_items__rfid__get"];
        /** Put Item */
        put: operations["put_item_items__rfid__put"];
        post?: never;
        /** Delete Item */
        delete: operations["delete_item_items__rfid__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Items */
        get: operations["get_items_items_get"];
        put?: never;
        /** Post Item */
        post: operations["post_item_items_post"];
        delete?: never;
        options?: never;
        head?: never;
        /** Patch Items */
        patch: operations["patch_items_items_patch"];
        trace?: never;
    };
    "/items/{rfid}/containers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Item With Containers */
        get: operations["get_item_with_containers_items__rfid__containers_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/items/bulk": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Bulk Import Items
         * @description Bulk import items. Accepts a list of item dicts.
         *     If an item with the same tag_uuid exists, it is updated; otherwise, it is created.
         */
        post: operations["bulk_import_items_items_bulk_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stream": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Message Stream */
        get: operations["message_stream_stream_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/healthz": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Healthz */
        get: operations["healthz_healthz_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/completion/identification": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Identification */
        post: operations["identification_completion_identification_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** Change */
        Change: {
            /** User */
            user: string;
            /** Timestamp */
            timestamp: number;
            /** Diff From Prev Version */
            diff_from_prev_version: Record<string, never>;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** Item */
        Item: {
            /** Tag Uuid */
            tag_uuid: string;
            /** Short Name */
            short_name: string;
            /** Amount */
            amount?: number | null;
            /** Item Type */
            item_type?: string | null;
            /**
             * Consumable
             * @default false
             */
            consumable: boolean;
            /** Created At */
            created_at?: string;
            /** Created By */
            created_by?: string | null;
            /**
             * Changes
             * @default []
             */
            changes: components["schemas"]["Change"][];
            /** Ai Generated */
            ai_generated?: string[];
            /** Description */
            description?: string | null;
            /** Min Amount */
            min_amount?: number | null;
            /**
             * Tags
             * @default {}
             */
            tags: string[];
            /**
             * Images
             * @default []
             */
            images: string[];
            /** Cost New */
            cost_new?: number | null;
            /** Acquisition Date */
            acquisition_date?: number | null;
            /** Cost Used */
            cost_used?: number | null;
            /** Manufacturer */
            manufacturer?: string | null;
            /** Model Number */
            model_number?: string | null;
            /** Manufacturing Date */
            manufacturing_date?: number | null;
            /** Upc */
            upc?: string | null;
            /** Asin */
            asin?: string | null;
            /** Serial Number */
            serial_number?: string | null;
            /**
             * Vendors
             * @default []
             */
            vendors: string[];
            /**
             * Shop Url
             * @default []
             */
            shop_url: string[];
            size?: components["schemas"]["Size"] | null;
            /**
             * Documentation
             * @default []
             */
            documentation: string[];
            /**
             * Related Items
             * @default []
             */
            related_items: components["schemas"]["Relation"][];
            /** Container Tag Uuid */
            container_tag_uuid?: string | null;
            container?: components["schemas"]["Item"] | null;
            /** Current Location */
            current_location?: string | null;
            /** Borrowed By */
            borrowed_by?: string | null;
            /** Borrowed At */
            borrowed_at?: number | null;
            /** Borrowed Until */
            borrowed_until?: number | null;
            /** Owner */
            owner?: string | null;
            /** Borrowed */
            readonly borrowed: boolean;
            /** Container Name */
            readonly container_name: boolean;
        };
        /** ItemChangedResponse */
        ItemChangedResponse: {
            /** Message */
            message: string;
        };
        /** ItemRequest */
        ItemRequest: {
            /** Tag Uuid */
            tag_uuid: string;
            /** Short Name */
            short_name: string;
            /** Description */
            description?: string | null;
            /** Amount */
            amount?: number | null;
            /** Item Type */
            item_type?: string | null;
            /** Consumable */
            consumable?: boolean | null;
            /** Created At */
            created_at?: string | null;
            /** Created By */
            created_by?: string | null;
            /**
             * Changes
             * @default []
             */
            changes: components["schemas"]["Change"][] | null;
            /** Ai Generated */
            ai_generated?: string[];
            /** Min Amount */
            min_amount?: number | null;
            /** Tags */
            tags?: string[];
            /**
             * Images
             * @default []
             */
            images: string[] | null;
            /** Cost New */
            cost_new?: number | null;
            /** Acquisition Date */
            acquisition_date?: number | null;
            /** Cost Used */
            cost_used?: number | null;
            /** Manufacturer */
            manufacturer?: string | null;
            /** Model Number */
            model_number?: string | null;
            /** Manufacturing Date */
            manufacturing_date?: number | null;
            /** Upc */
            upc?: string | null;
            /** Asin */
            asin?: string | null;
            /** Serial Number */
            serial_number?: string | null;
            /**
             * Vendors
             * @default []
             */
            vendors: string[] | null;
            /**
             * Shop Url
             * @default []
             */
            shop_url: string[] | null;
            size?: components["schemas"]["Size"] | null;
            /**
             * Documentation
             * @default []
             */
            documentation: string[] | null;
            /** Container Tag Uuid */
            container_tag_uuid?: string | null;
            /** Current Location */
            current_location?: string | null;
            /** Borrowed By */
            borrowed_by?: string | null;
            /** Borrowed At */
            borrowed_at?: number | null;
            /** Borrowed Until */
            borrowed_until?: number | null;
            /** Owner */
            owner?: string | null;
        };
        /** Reader */
        Reader: {
            /** Reader Id */
            reader_id: string;
            /** Reader Name */
            reader_name: string;
        };
        /** RecursiveContainerObject */
        RecursiveContainerObject: {
            /** Tag Uuid */
            tag_uuid: string;
            /** Short Name */
            short_name?: string | null;
            container?: components["schemas"]["RecursiveContainerObject"] | null;
        };
        /** Relation */
        Relation: {
            /** Related Tags */
            related_tags: string[];
            /** Tag */
            tag: string[];
            /** Description */
            description?: string | null;
        };
        /** Size */
        Size: {
            /** Length */
            length: number;
            /** Width */
            width: number;
            /** Height */
            height: number;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_readers_readers_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Reader"][];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    create_reader_readers_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Reader"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Reader"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_user_readers__reader_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reader_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Reader"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_reader_readers__reader_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reader_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_item_items__rfid__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                rfid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Item"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    put_item_items__rfid__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                rfid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": Record<string, never> | null;
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemChangedResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_item_items__rfid__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                rfid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemChangedResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_items_items_get: {
        parameters: {
            query?: {
                query?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Item"][];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    post_item_items_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": Record<string, never> | null;
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemChangedResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    patch_items_items_patch: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Item"][];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_item_with_containers_items__rfid__containers_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                rfid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecursiveContainerObject"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    bulk_import_items_items_bulk_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ItemRequest"][];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemChangedResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    message_stream_stream_get: {
        parameters: {
            query: {
                reader: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    healthz_healthz_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    identification_completion_identification_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
